* DONE write user design(with imgui extend) 

dispatch ui state
custom control
skin
event handle



middleware
(middleware can invoke other middleware by injected middlewareAPI!
e.g. meta3d-imgui can invoke vertex-buffer-manage!
)





# registerEventHandler
# showAllRegistedEventHandlers

# edit

# TODO run



# registerMenuUI
# ////showAllRegistedMenuUIs


# TODO run


# registerMiddleware


# TODO run



# registerEnginePlugin
# (need refresh page!)

# TODO run



# registerEngineComponent


# TODO run


* DONE fix "register plugin not work" bug



wpk now only contain asb, not contain wdb!

** DONE change to string

** DONE fix "register plugin not work" bug

# ** TODO generate

# ** TODO load


need generate and save to indexdb and reload



# * TODO implement, pass run test

# use render webgpu cube to instead of imgui render for demo!


# * TODO add "multi edit the same scene" 








# * TODO add "redo/undo"


** DONE think ui

editor ui state, scene ui state:{
    all ui's state map,
    canvas
}


*** DONE event handler


*** DONE handle custom control

////no need??? because register ui is already equal to custom control!!!

need! because custom control is commonlib control as lib, while register ui is used one!

*** DONE handle skin


*** DONE game ui








* TODO improve

** DONE refactor: change packages(e.g. editor/, engine/, ...) to default/, middleware/, component/, work-plugin/, event-handler/, ui/



# ** TODO change meta3d-commonlib, meta3d-bs-most, meta3d-engine-core to be middleware so that not pack it by webpack for who(e.g. EventManager, UI, transform component) use it!
** TODO inject default middlewares(e.g.  meta3d-commonlib, meta3d-bs-most, meta3d-engine-core, EventManager, UI) as api



# ** TODO split type from meta3d-engine-core to be meta3d-engine-core-protocol package

# edit component package(e.g. meta3d-component-transform)


** TODO use middlwareState(contain allMiddlewareStatesMap), editorUIState, engineCoreState(create by meta3d-engine-core)

ui,event handler no need state! so no editorState!


** TODO inject api(only remain MiddlewareManager.unsafeGet) and { middlewareState, editorUIState, engineCoreState } as states

inject api and states to ui->execFunc, event handler->handler(
    e.g.: 
let handler = ((middlwareState, engineState), api , e,) => {
...
(middlwareState, engineState)

);


inject api to middleware->getData; inject states to middleware->getData's functions;


how to inject to component, work plugin???


* TODO new demo: rewrite old demo


** DONE finish engine user design





** TODO finish editor user design




** TODO how protocol work?


** TODO refactor: refactor all as design point

packages should be defaults/; extensions/(can has xxx-type package); 

components/, work-plugins/, exec-funcs/(rename?); # skins/, custom-controls/, 
(these folders is to put one which will be used by multi extensions!)


** TODO refactor current Main


** TODO add user code


** TODO pass run


** TODO fix UI(support 3d ui; use visible, change for dispatch)




* TODO finish, make engine user to use

** DONE finish engine-core compile

** DONE engine-core

# TODO rename po to state
# TODO add engine-core state 
# TODO refactor meta3d-commonlib, extract type
# TODO add prepare, init, runPipeline, registerWorkPlugin, unregisterWorkPlugin
# TODO refactor: change ExtensionManagerType.state to meta3d state(Meta3dType add index.res to define type); api, ... to index;

** DONE root work plugin





** DONE design contribute point

how to use protocol???


registerWorkPlugin

name XxxContribute, move to contribute_points/ folder
e.g. workPluginContribute, getWorkPluginContribute

change -type to -protocol;



contribute_points/,
xxx
service/
ServiceType
state/
StateType
other/



** DONE complete check, add getVersion?

give dependent extension name, extension protocol name, version when registerExtension;






** TODO add, gameObject, transform component

** TODO add webgl render(just log)

add canvas

add webgl

add webgl render


** TODO pass run test


** TODO pass engine core test


** TODO refactor: add work-plugins packages



** TODO refactor: move wonder-engine->register work plugins to extension

# ** TODO use: await trigger("meta3d-active-extension", "all"), await trigger("meta3d-init")


** TODO finish user side


* TODO finish, make editor user to use

** TODO finish editor user design

** TODO add ui, event

TODO fix UI(support 3d ui; use visible, change for dispatch)

** TODO use engine(for edit, run scene)

** TODO finish user side



* TODO change to use typescript for wonder-engine, wonder-editor

** TODO build engine by typescript

** TODO build editor by typescript



* TODO update editor

** TODO generate and load .meta3d

.meta3d = multi .mex


** TODO add register extension



* TODO update engine

** TODO use event

add InitEventJob

** TODO use ui

* TODO update editor

** TODO update engine



* TODO publish 







* TODO update engine

** TODO add redo-undo

* TODO update editor

** TODO update engine

** TODO add redo-undo

** TODO add multi-user-edit



** TODO add menu





* TODO publish v0.1.0


# * TODO update engine

# ** TODO add shader glsl(for webgl)


# * TODO update editor




* TODO update engine

** TODO generate .msc

only has gameObject, transform component


* TODO update editor


* TODO update engine

** TODO add pbrmaterial component

# fixed shader
no shader


* TODO update editor

** TODO add asset manager
only has pbrmaterial asset

** TODO generate .mas


* TODO update editor

** TODO add publish(separate logic and ui to different extensions)




* TODO publish 0.2.0



* TODO update ui

** TODO UI use webgl render imgui to implement


*** TODO use UI-Render-WebGL extension for UI extension!  so can use UI-Render-WebGPU extension for UI to use webgpu and not edit UI code!!!

UI dependent on UI-Render-Type;
UI-Render-WebGL, UI-Render-WebGPU implement UI-Render-Type.






*** TODO implement drawBox


# *** TODO implement drawImage


*** TODO implement drawText

default load .fnt, .bitmap resources, not open its control to user




*** TODO implement drawCopyTextArea


*** TODO implement drawButton by custom control


*** TODO use skin


*** TODO support whole skin(e.g. can set background by set whole canvas->clearColor)


* TODO update event

refer to eventmanager package



* TODO all files should add bdd test



* TODO publish v0.3.0



* TODO update engine

** TODO add webgl render(can render a cube)


* TODO update editor

** TODO add edit scene, run scene


* TODO publish v0.4.0



* TODO update engine

** TODO component support dispose

** TODO component support clone

* TODO update editor

** TODO add scene tree header

*** TODO add dispose gameObject button

*** TODO add clone gameObject button


* TODO publish v0.5.0



* TODO prepare to open for user to use

** TODO move meta3d-engine, meta3d-editor to Wonder.js repo


** TODO prepare user's example code(typescript)


** TODO prepare doc for user


* TODO publish v0.6.0

** TODO publish

** TODO open for user to use and extend!!!




* TODO rewrite, add bdd test and publish for user to use

** TODO prepare for build editor for user

menu, edit/run scene, extension manager




** TODO prepare for build engine for user

e.g. draw cubes by webgpu



* TODO new demo: rewrite old demo

** TODO implement register event handler

# *** TODO use drawCopyTextarea

** TODO refactor: UI,EventManager inject api

for commonlib, MiddlewareManager, ...


** TODO refactor: refactor all as design point

# rename default/ to src/, src/extensions/(e.g. UI, EventManager, ExtensionManager), src/core(editor-core/, engine-core/); add extensions/ folder instead of other folders;
# rename default/ to src/, src/core(editor-core/, engine-core/); add extensions/(e.g. UI, EventManager, ExtensionManager) folder instead of other folders;
rename default/ to src/(editor core file); add extensions/(e.g. UI, EventManager, ExtensionManager), extension-types/ folder instead of other folders;



** TODO refactor: change stateValue to string


** TODO implement register middleware


** TODO implement register ui


** TODO improve imgui

based on design

*** TODO handle custom control

////no need??? because register ui is already equal to custom control!!!

need! because custom control is commonlib control as lib, while register ui is used one!

*** TODO handle skin


*** TODO only editor ui



** TODO generate and load wpk(only has asb) instead of save!

# wpk = asb + wdb, but now only has asb


** TODO add multi user edit



** TODO move multi user edit to be out repo!

support generate asb, can combine it to the exist wpk(combine asb)



** TODO design how multi user edit to support extend by user(e.g. in user middleware)!
 

** TODO add redo,undo



** TODO register work plugin


** TODO register component



** TODO add one edit scene

has one default camera

can add one gameObject + outline once

add editSceneUI

** TODO add one run scene

use default camera

add runSceneUI


** TODO wpk should contain wdb


** TODO publish



# * TODO add custom middleware for change str to fields(for extend data, like stateValue, skin, script attribute)

# write by typescript


# ** TODO generate asb, can combine it to the exist wpk(combine asb)



* TODO support upgrade user's wpk to use latest extends and default(middleware, core)!




* TODO improve

** TODO be interface(e.g. eventManager, UI, ...)





* TODO rewrite, add bdd test and publish for user to use

# UI still use dom to implement
** TODO UI use webgl render imgui to implement


*** TODO implement drawBox


# *** TODO implement drawImage


*** TODO implement drawText

default load .fnt, .bitmap resources, not open its control to user




*** TODO implement drawCopyTextArea


*** TODO implement drawButton by custom control


*** TODO use skin


*** TODO support whole skin(e.g. can set background by set whole canvas->clearColor)



** TODO finish menu

provide menu extend ui(encapuslate register ui)



** TODO implement transform, geometry, pbrMaterial, cameraView, perspectiveCameraProjection components

component should implement dispose, redo/undo, clone


** TODO add basic webgpu render work plugin
shader is fixed


** TODO implement "add cube gameObject" button, "clone gameObject" button for edit and run scene


** TODO implement "generate, load wpk", "redo/undo", "publish"



** TODO add user case


*** TODO add user extend wpk: to change str to fields(for extend data, like stateValue, skin, script attribute)

write by typescript


# **** TODO generate asb, can combine it to the exist wpk(combine asb)


** TODO implement "upgrade user wpk"


** TODO publish v2.0.0-alpha.7


** TODO prepare doc for user


** TODO open for user to use and extend!!!











* TODO change UI to use webgpu render






* TODO implement multi user edit as a outer repo(wpk), and load it
